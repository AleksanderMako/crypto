// Code generated by mockery v1.1.2. DO NOT EDIT.

package mocks

import (
	dbResponses "cryptoServer/database/dbResponses"

	mock "github.com/stretchr/testify/mock"

	types "cryptoServer/database/types"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CreateCurrency provides a mock function with given fields: newCurrency
func (_m *Storage) CreateCurrency(newCurrency types.Currency) string {
	ret := _m.Called(newCurrency)

	var r0 string
	if rf, ok := ret.Get(0).(func(types.Currency) string); ok {
		r0 = rf(newCurrency)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CreateOrder provides a mock function with given fields: newOrder
func (_m *Storage) CreateOrder(newOrder types.Order) {
	_m.Called(newOrder)
}

// DeleteOrder provides a mock function with given fields: key
func (_m *Storage) DeleteOrder(key string) {
	_m.Called(key)
}

// GetCurrency provides a mock function with given fields: ID
func (_m *Storage) GetCurrency(ID string) types.Currency {
	ret := _m.Called(ID)

	var r0 types.Currency
	if rf, ok := ret.Get(0).(func(string) types.Currency); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(types.Currency)
	}

	return r0
}

// GetOrders provides a mock function with given fields: filter
func (_m *Storage) GetOrders(filter func(types.Order) bool) []dbResponses.DBOrder {
	ret := _m.Called(filter)

	var r0 []dbResponses.DBOrder
	if rf, ok := ret.Get(0).(func(func(types.Order) bool) []dbResponses.DBOrder); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dbResponses.DBOrder)
		}
	}

	return r0
}

// GetWallet provides a mock function with given fields: ID
func (_m *Storage) GetWallet(ID string) types.Wallet {
	ret := _m.Called(ID)

	var r0 types.Wallet
	if rf, ok := ret.Get(0).(func(string) types.Wallet); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(types.Wallet)
	}

	return r0
}

// GetWallets provides a mock function with given fields:
func (_m *Storage) GetWallets() []dbResponses.DBWallet {
	ret := _m.Called()

	var r0 []dbResponses.DBWallet
	if rf, ok := ret.Get(0).(func() []dbResponses.DBWallet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dbResponses.DBWallet)
		}
	}

	return r0
}

// GetWalletsAndCurrencies provides a mock function with given fields:
func (_m *Storage) GetWalletsAndCurrencies() []dbResponses.DBWalletCurrency {
	ret := _m.Called()

	var r0 []dbResponses.DBWalletCurrency
	if rf, ok := ret.Get(0).(func() []dbResponses.DBWalletCurrency); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dbResponses.DBWalletCurrency)
		}
	}

	return r0
}

// UpdateCurrency provides a mock function with given fields: ID, currency
func (_m *Storage) UpdateCurrency(ID string, currency types.Currency) {
	_m.Called(ID, currency)
}

// UpdateOrder provides a mock function with given fields: ID, updatedData
func (_m *Storage) UpdateOrder(ID string, updatedData types.Order) {
	_m.Called(ID, updatedData)
}

// UpdateWallet provides a mock function with given fields: ID, wallet
func (_m *Storage) UpdateWallet(ID string, wallet types.Wallet) {
	_m.Called(ID, wallet)
}
